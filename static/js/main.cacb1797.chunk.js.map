{"version":3,"sources":["themes/base.js","themes/normal.js","themes/dark.js","themes/CustomThemeProvider.js","components/AraTopBar.js","components/AraFooter.js","Layout.js","components/AraForm.js","components/AraHeader.js","Home.js","components/AraNotFound.js","docs/HowItWorks.js","AraRoutes.js","App.js","reportWebVitals.js","index.js"],"names":["themes","normal","createTheme","palette","primary","main","secondary","error","red","A400","background","default","titleBar","contrastText","overrides","MuiOutlinedInput","multiline","fontWeight","fontSize","direction","typography","fontFamily","join","dark","type","light","CustomThemeContext","React","createContext","currentTheme","setTheme","CustomThemeProvider","props","children","localStorage","getItem","useState","themeName","_setThemeName","theme","getTheme","contextValue","name","setItem","Provider","value","ThemeProvider","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","marginLeft","textDecoration","AraTopBar","classes","useContext","isDark","Boolean","themeText","className","AppBar","position","dir","style","Toolbar","Typography","variant","Button","color","href","FormControlLabel","control","Switch","checked","onChange","event","target","label","AraFooter","align","Link","Date","getFullYear","Layout","Fragment","CssBaseline","Box","mt","paper","marginTop","display","flexDirection","alignItems","avatar","margin","backgroundColor","CopyToClipText","text","myRef","useRef","data","setData","useEffect","current","select","document","execCommand","ref","Alert","elevation","AraForm","originalText","setOriginalText","reshapedText","setReshapedText","copyText","setCopyText","copySuccess","setCopySuccess","open","setOpen","handleClose","reason","transformedText","reshaper","ArabicShaper","convertArabic","reverse","handleValueChange","TextField","id","placeholder","rows","fullWidth","e","autoFocus","InputProps","endAdornment","InputAdornment","startIcon","onClick","disabled","Snackbar","autoHideDuration","onClose","severity","logo","AraHeader","Home","AraNotFound","content","HowItWorks","AraRoutes","exact","path","component","to","jss","create","plugins","jssPreset","rtl","App","StylesProvider","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cacb1797.chunk.js","sourcesContent":["// Many thanks to Anthony Bouch (https://www.58bits.com/blog/2020/05/27/material-ui-theme-switcher-react)\r\nimport normal from './normal'\r\nimport dark from './dark'\r\n\r\nconst themes = {\r\n    normal,\r\n    dark,\r\n}\r\n\r\nexport default function getTheme(theme) {\r\n    return themes[theme]\r\n}","import { createTheme } from '@material-ui/core/styles'\r\nimport { red } from '@material-ui/core/colors'\r\n\r\n// Normal or default theme\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main: '#cc4444',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#f5f5f5',\r\n        },\r\n        titleBar: {\r\n            main: '#eeeeee',\r\n            contrastText: '#222222',\r\n        },\r\n    },\r\n    // Get a beautiful TextArea in Material UI: https://stackoverflow.com/a/64051350/4488332\r\n    overrides: {\r\n        MuiOutlinedInput: {\r\n            multiline: {\r\n                fontWeight: 'bold',\r\n                fontSize: '20px'\r\n            }\r\n        }\r\n    },\r\n    // Right to left: https://v3.material-ui.com/guides/right-to-left/\r\n    direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n    // Font\r\n    typography: {\r\n        fontFamily: [\r\n            'Tajawal',\r\n            'sans-serif',\r\n        ].join(','),\r\n    },\r\n})\r\n\r\nexport default theme","import { createTheme } from '@material-ui/core/styles'\r\nimport { red } from '@material-ui/core/colors'\r\n\r\n// Dark theme\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#a1b1af',\r\n            light: 'rgb(81, 91, 95)',\r\n            dark: 'rgb(26, 35, 39)',\r\n            contrastText: '#ffffff',\r\n        },\r\n        secondary: {\r\n            main: '#FFB74D',\r\n            light: 'rgb(255, 197, 112)',\r\n            dark: 'rgb(200, 147, 89)',\r\n            contrastText: 'rgba(0, 0, 0, 0.87)',\r\n        },\r\n        titleBar: {\r\n            main: '#555555',\r\n            contrastText: '#ffffff',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n    },\r\n    // Get a beautiful TextArea in Material UI: https://stackoverflow.com/a/64051350/4488332\r\n    overrides: {\r\n        MuiOutlinedInput: {\r\n            multiline: {\r\n                fontWeight: 'bold',\r\n                fontSize: '20px'\r\n            }\r\n        }\r\n    },\r\n    // Right to left: https://v3.material-ui.com/guides/right-to-left/\r\n    direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n    // Font\r\n    typography: {\r\n        fontFamily: [\r\n            'Tajawal',\r\n            'sans-serif',\r\n        ].join(','),\r\n    },\r\n})\r\n\r\nexport default theme\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\nimport getTheme from './base'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport const CustomThemeContext = React.createContext(\r\n    {\r\n        currentTheme: 'normal',\r\n        setTheme: null,\r\n    },\r\n)\r\n\r\nconst CustomThemeProvider = (props) => {\r\n    // eslint-disable-next-line react/prop-types\r\n    const { children } = props\r\n\r\n    // Read current theme from localStorage or maybe from an api\r\n    const currentTheme = localStorage.getItem('appTheme') || 'normal'\r\n\r\n    // State to hold the selected theme name\r\n    const [themeName, _setThemeName] = useState(currentTheme)\r\n\r\n    // Retrieve the theme object by theme name\r\n    const theme = getTheme(themeName)\r\n\r\n    // Wrap _setThemeName to store new theme names in localStorage\r\n    const setThemeName = (name) => {\r\n        localStorage.setItem('appTheme', name)\r\n        _setThemeName(name)\r\n    }\r\n\r\n    const contextValue = {\r\n        currentTheme: themeName,\r\n        setTheme: setThemeName,\r\n    }\r\n\r\n    return (\r\n        <CustomThemeContext.Provider value={contextValue}>\r\n            <ThemeProvider theme={theme}>{children}</ThemeProvider>\r\n        </CustomThemeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CustomThemeProvider","import React, { useContext } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\n\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport SwitchUI from '@material-ui/core/Switch'\r\nimport { CustomThemeContext } from '../themes/CustomThemeProvider'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    marginLeft: \"20px\",\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\n\r\nexport default function AraTopBar() {\r\n  const classes = useStyles();\r\n\r\n  const { currentTheme, setTheme } = useContext(CustomThemeContext)\r\n  const isDark = Boolean(currentTheme === 'dark')\r\n\r\n  const themeText = !isDark ? 'نهار' : 'ليل';\r\n\r\n  const handleThemeChange = (event) => {\r\n    const { checked } = event.target\r\n    if (checked) {\r\n      setTheme('dark')\r\n    } else {\r\n      setTheme('normal')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" dir=\"rtl\" style={{ background: \"#2E3B55\" }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Button color=\"inherit\" href=\"/\">الصفحة الرئيسية</Button>\r\n            <Button color=\"inherit\" href=\"/how-it-works\">للفضوليين</Button>\r\n          </Typography>\r\n          <FormControlLabel\r\n            control={<SwitchUI checked={isDark} onChange={handleThemeChange} />}\r\n            label={themeText}\r\n          />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div >\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nfunction AraFooter() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            جميع الحقوق <b>غير</b> محفوظة\r\n            <br />\r\n            <Link href=\"https://github.com/bilalix/arabic-reshaper-app\">\r\n                رابط الكود المفتوح المصدر\r\n            </Link>{' '}\r\n            <br />\r\n            {new Date().getFullYear()}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default AraFooter","import React from 'react';\r\nimport AraTopBar from \"./components/AraTopBar\"\r\nimport Footer from \"./components/AraFooter\"\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <AraTopBar />\r\n            <div dir=\"rtl\">\r\n                {props.children}\r\n            </div>\r\n            <Box mt={8}>\r\n                <Footer />\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Layout","import React from 'react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { TextField, InputAdornment, Button } from \"@material-ui/core\";\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport reshaper from 'arabic-persian-reshaper'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    }\r\n}));\r\n\r\n// TODO: Read more about Ref and how it works (https://stackoverflow.com/a/63559549/4488332)\r\nconst CopyToClipText = ({ text }) => {\r\n    const myRef = useRef(null);\r\n    const [data, setData] = useState(text);\r\n    useEffect(() => setData(text), [text]);\r\n\r\n    useEffect(() => {\r\n        if (myRef.current && data) {\r\n            myRef.current.select();\r\n            document.execCommand('copy');\r\n            setData(null);\r\n        }\r\n    }, [data, myRef.current]);\r\n\r\n    return <div>{data && <textarea ref={myRef}>{data}</textarea>}</div>;\r\n};\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function AraForm() {\r\n    const classes = useStyles()\r\n\r\n    const [originalText, setOriginalText] = useState('')\r\n    const [reshapedText, setReshapedText] = useState('')\r\n\r\n    const [copyText, setCopyText] = useState('')\r\n    const [copySuccess, setCopySuccess] = useState(false)\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleCopyClick = () => () => {\r\n        setCopyText(reshapedText)\r\n        setCopySuccess(true)\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleValueChange = () => {\r\n        const transformedText = reshaper.ArabicShaper.convertArabic(originalText)\r\n        // for some reason, transformedText doesn't show up properly on Davinci Resolve 17\r\n        // so I neede to reverse the string\r\n        setReshapedText([...transformedText].reverse().join(''))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // useEffect is needed sice setState is asynchronous: https://stackoverflow.com/a/65807556/4488332\r\n        handleValueChange()\r\n        originalText ? setCopySuccess(false) : setCopySuccess(true)\r\n    }, [originalText])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                {/* <h2>النص الأصلي</h2> */}\r\n                <TextField\r\n                    id=\"outlined-multiline-static-original\"\r\n                    name=\"originalText\"\r\n                    margin=\"normal\"\r\n                    label=\"النص الأصلي\"\r\n                    placeholder=\"أدخل النص هنا\"\r\n                    multiline\r\n                    rows={5}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onChange={e => setOriginalText(e.target.value)}\r\n                    value={originalText}\r\n                    autoFocus\r\n                />\r\n                <h2>\r\n                    {reshapedText && <span>قم بنسخ النص أسفله</span>}\r\n                </h2>\r\n                <TextField\r\n                    id=\"outlined-multiline-static-reshaped\"\r\n                    name=\"reshapedText\"\r\n                    margin=\"normal\"\r\n                    label=\"النص المعدل\"\r\n                    multiline\r\n                    rows={5}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    value={reshapedText}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <Button\r\n                                    startIcon={<FileCopyIcon />}\r\n                                    onClick={handleCopyClick()}\r\n                                    disabled={copySuccess}\r\n                                >\r\n                                    نسخ\r\n                                </Button>\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                />\r\n                <Snackbar open={open} autoHideDuration={2500} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity=\"success\">\r\n                        تم نسخ النص بنجاح!\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n            <CopyToClipText text={copyText} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    logo: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n}));\r\n\r\nexport const arabicIntro = \"Arabic Reshaper هو موقع يسمح بتحويل الكتابة العربية الى كتابة مفهومة من قبل اغلب برامج التصميم مثل Photoshop و After Effects و Premiere Pro و Avid Media Composer و برامج اخرى كثيرة\"\r\nexport const englishIntro = \"Arabic Reshaper is a website that allows you to convert arabic text to a format compatible with many softwares like PhotoShop, After Effects, Premiere Pro, Avid Media Composer etc..\"\r\n\r\nfunction AraHeader() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.logo}>\r\n            {/* \r\n            TODO: find a way to display images from public folder\r\n            <img src={window.location.origin + \"images/logo.png\"} alt=\"Logo\" height=\"100px\" /> \r\n            */}\r\n            <h1>(إعادة تشكيل كلمات اللغة العربية) Arabic Reshaper </h1>\r\n            <Alert severity=\"info\">\r\n                {arabicIntro}\r\n            </Alert>\r\n            <Alert severity=\"info\" dir=\"ltr\">\r\n                {englishIntro}\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AraHeader\r\n","import React from 'react';\r\nimport AraForm from './components/AraForm';\r\nimport Header from './components/AraHeader';\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <React.Fragment>\r\n            <Header />\r\n            <AraForm />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\n\r\nfunction AraNotFound() {\r\n    return (\r\n        <h1>هذه الصفحة غير موجودة</h1>\r\n    );\r\n}\r\n\r\nexport default AraNotFound","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    content: {\r\n        fontSize: '20px',\r\n    },\r\n}));\r\n\r\nfunction HowItWorks() {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div dir=\"ltr\">\r\n            <h1>How It Works?</h1>\r\n            <div className={classes.content}>\r\n                <p>\r\n                    Arabic script is very special with two essential features:\r\n                    <ol>\r\n                        <li>It is written from right to left.</li>\r\n                        <li>The characters change shape according to their surrounding characters.</li>\r\n                    </ol>\r\n                    So when you try to print text written in Arabic script in an application – or a library – that\r\n                    doesn't support Arabic you're pretty likely to end up with something that looks like this: <b>ةي ب ر ع</b>\r\n                </p>\r\n                I used <a href=\"https://www.npmjs.com/package/arabic-persian-reshaper\">arabic-persian-reshaper</a> package which\r\n                contains the core logic (there are many others in different languages such as <a href=\"https://github.com/louy/Javascript-Arabic-Reshaper\">\r\n                    Javascript-Arabic-Reshaper</a> and <a href=\"https://github.com/mpcabd/python-arabic-reshaper/\">python-arabic-reshaper</a> etc..).\r\n                They basically solve the issue of disconnected Arabic letters which can be seen while using a custom font in almost all platforms (Web, Android, iOS, ...).\r\n                <br />\r\n                Please take a look at <em>Additional Resources</em> below if you want to dive deeper in what happens under the hood.\r\n\r\n                <p>Additional Resources:</p>\r\n                <ul>\r\n                    <li><a href=\"https://ar.wikipedia.org/wiki/%D8%A7%D9%84%D8%AE%D8%B7_%D8%A7%D9%84%D8%B9%D8%B1%D8%A8%D9%8A_%D9%81%D9%8A_%D9%8A%D9%88%D9%86%D9%8A%D9%83%D9%88%D8%AF\">الخط العربي في يونيكود</a></li>\r\n                    <li><a href=\"https://en.wikipedia.org/wiki/Complex_text_layout\">Complex text layout</a></li>\r\n                    <li><a href=\"https://en.wikipedia.org/wiki/Arabic_script_in_Unicode\">Arabic script in Unicode</a></li>\r\n                    <li>\r\n                        <a href=\"http://www.alanwood.net/unicode/arabic_presentation_forms_b.html\">Arabic Presentation Forms-B</a>\r\n                        <span> </span>(<a href=\"http://www.unicode.org/charts/PDF/UFE70.pdf\">PDF</a>)\r\n                        <span> </span>(<a href=\"https://www.unicode.org/versions/Unicode13.0.0/ch09.pdf\">The Unicode Standard</a>)\r\n                    </li>\r\n                    <li><a href=\"http://www.unicode.org/charts/\">Unicode 13.0 Character Code Charts</a></li>\r\n\r\n                    <li><a href=\"https://github.com/mpcabd/python-arabic-reshaper\">python-arabic-reshaper</a></li>\r\n                    <li><a href=\"https://discourse.psychopy.org/t/reshaping-english-text-to-arabic/4235/5\">Reshaping English Text to Arabic</a></li>\r\n                </ul>\r\n\r\n                <p>Similar Websites:</p>\r\n                <ul>\r\n                    <li><a href=\"http://www.arabic-text.com/\">Arabic-text.com</a></li>\r\n                    <li><a href=\"https://reshaper.mpcabd.xyz/\">Online Arabic Reshaper</a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HowItWorks","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport AraNotFound from \"./components/AraNotFound\";\r\nimport HowItWorks from \"./docs/HowItWorks\";\r\n\r\n\r\nfunction AraRoutes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/\"> <Home /></Route>\r\n                <Route exact path=\"/how-it-works\"> <HowItWorks /></Route>\r\n                <Route path=\"/404\" component={AraNotFound} />\r\n                <Redirect to=\"/404\" />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n};\r\n\r\nexport default AraRoutes;","import React from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\n\r\n// Configure JSS for RTL\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\r\nimport Layout from \"./Layout\";\r\nimport AraRoutes from \"./AraRoutes\";\r\nimport CustomThemeProvider from './themes/CustomThemeProvider';\r\n\r\n\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nfunction App(props) {\r\n  return (\r\n    <CustomThemeProvider>\r\n      <StylesProvider jss={jss}>\r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n          <Layout {...props}>\r\n            <AraRoutes />\r\n          </Layout>\r\n        </Container>\r\n      </StylesProvider>\r\n    </CustomThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}