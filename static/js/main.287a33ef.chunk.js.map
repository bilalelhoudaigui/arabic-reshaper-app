{"version":3,"sources":["Header.js","ArabicForm.js","AraAppBar.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","logo","marginTop","spacing","display","flexDirection","alignItems","title","margin","backgroundColor","palette","primary","main","Header","classes","className","src","alt","height","Alert","severity","dir","paper","avatar","ArabicForm","useState","originalText","setOriginalText","reshapedText","setReshapedText","useEffect","transformedText","reshaper","ArabicShaper","convertArabic","reverse","join","handleValueChange","CssBaseline","TextField","id","name","label","placeholder","multiline","rows","fullWidth","variant","onChange","e","target","value","required","autoFocus","root","flexGrow","menuButton","marginRight","marginLeft","textDecoration","AraAppBar","props","bgTheme","setBgTheme","icon","AppBar","position","style","background","Toolbar","Typography","Link","href","color","IconButton","edge","onClick","jss","create","plugins","jssPreset","rtl","light","type","dark","App","appTheme","createTheme","overrides","MuiOutlinedInput","fontWeight","fontSize","direction","typography","fontFamily","ThemeProvider","StylesProvider","Container","component","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,MAAO,CACHC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,QAAQC,UAwBhCC,MApBf,WACI,IAAMC,EAAUhB,IAKhB,OACI,sBAAKiB,UAAWD,EAAQb,KAAxB,UACI,qBAAKc,UAAU,cAAcC,IAAI,YAAYC,IAAI,OAAOC,OAAO,UAC/D,iDACA,cAACC,EAAA,EAAD,CAAOC,SAAS,OAAOC,IAAI,MAA3B,SAPY,umBAUZ,cAACF,EAAA,EAAD,CAAOC,SAAS,OAAhB,SATa,8L,mCCbnBtB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCsB,MAAO,CACHpB,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBiB,OAAQ,CACJf,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,QAAQC,UAKhC,SAASY,IACpB,IAAMV,EAAUhB,IAEhB,EAAwC2B,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAcA,OALAC,qBAAU,YAPgB,WACtB,IAAMC,EAAkBC,IAASC,aAAaC,cAAcR,GAG5DG,EAAgB,YAAIE,GAAiBI,UAAUC,KAAK,KAKpDC,KACD,CAACX,IAGA,qCACI,cAACY,EAAA,EAAD,IACA,sBAAKjB,IAAI,MAAMN,UAAWD,EAAQQ,MAAlC,UAEI,cAACiB,EAAA,EAAD,CACIC,GAAG,qCACHC,KAAK,eACLjC,OAAO,SACPkC,MAAM,gEACNC,YAAY,uEACZC,WAAS,EACTC,KAAM,EACNC,WAAS,EACTC,QAAQ,WACRC,SAAU,SAAAC,GAAC,OAAItB,EAAgBsB,EAAEC,OAAOC,QACxCA,MAAOzB,EACP0B,UAAQ,EACRC,WAAS,IAEb,6BACMzB,GAAgB,mIAEtB,cAACW,EAAA,EAAD,CACIC,GAAG,qCACHC,KAAK,eACLjC,OAAO,SACPkC,MAAM,gEACNrB,IAAI,MACJuB,WAAS,EACTC,KAAM,EACNC,WAAS,EACTC,QAAQ,WACRI,MAAOvB,U,2FCjErB9B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsD,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAazD,EAAMG,QAAQ,IAE7BI,MAAO,CACLgD,SAAU,EACVG,WAAY,OACZC,eAAgB,YAIL,SAASC,EAAUC,GAChC,IAAM/C,EAAUhB,IACRgE,EAA8BD,EAA9BC,QAASC,EAAqBF,EAArBE,WAAYC,EAASH,EAATG,KAE7B,OACE,qBAAKjD,UAAWD,EAAQwC,KAAxB,SACE,cAACW,EAAA,EAAD,CAAQC,SAAS,SAAS7C,IAAI,MAAM8C,MAAO,CAAEC,WAAY,WAAzD,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYvB,QAAQ,KAAKhC,UAAWD,EAAQP,MAA5C,SACE,cAACgE,EAAA,EAAD,CAAMC,KAAK,QAAQC,MAAM,UAAUN,MAAO,CAAER,eAAgB,QAA5D,oDAEF,cAACe,EAAA,EAAD,CACEC,KAAK,MACLF,MAAM,UACN,aAAW,OACXpD,IAAI,MACJuD,QAAS,kBAAMb,GAAYD,IAL7B,SAOGE,WCxBb,IAAMa,EAAMC,YAAO,CAAEC,QAAQ,GAAD,mBAAMC,cAAYD,SAAlB,CAA2BE,UA4ChD,IAAMC,EAAQ,CACnBxE,QAAS,CACPyE,KAAM,UAGGC,EAAO,CAClB1E,QAAS,CACPyE,KAAM,SAIKE,EApDf,WACE,MAA8B5D,oBAAS,GAAvC,mBAAOqC,EAAP,KAAgBC,EAAhB,KACMC,EAAQF,EAAgC,cAAC,IAAD,IAAtB,cAAC,IAAD,IAElBwB,EAAWC,YAEfzB,EAAUoB,EAAQE,EAElB,CAEEI,UAAW,CACTC,iBAAkB,CAChB7C,UAAW,CACT8C,WAAY,OACZC,SAAU,UAKhBC,UAAW,MACXC,WAAY,CACVC,WAAY,CACV,UACA,cACA1D,KAAK,QAIb,OACI,cAAC2D,EAAA,EAAD,CAAe/F,MAAOsF,EAAtB,SACE,cAACU,EAAA,EAAD,CAAgBnB,IAAKA,EAArB,SACE,eAACoB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACvC,EAAD,CAAWE,QAASA,EAASC,WAAYA,EAAYC,KAAMA,IAC3D,cAAC,EAAD,IACA,cAACxC,EAAD,YCzCG4E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.287a33ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    logo: {\r\n        marginTop: theme.spacing(3),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    title: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n}));\r\n\r\nfunction Header() {\r\n    const classes = useStyles()\r\n\r\n    const arabicIntro = \"Arabic Reshaper هو موقع يسمح بتحويل الكتابة العربية الى كتابة مفهومة من قبل اغلب برامج التصميم مثل Photoshop و After Effects و Premiere Pro و Avid Media Composer و برامج اخرى كثيرة\"\r\n    const englishIntro = \"Arabic Reshaper is a website that allows you to convert arabic text to a format compatible with many softwares like PhotoShop, After Effects, Premiere Pro, Avid Media Composer etc..\"\r\n\r\n    return (\r\n        <div className={classes.logo}>\r\n            <img className=\"Header-logo\" src=\"/logo.png\" alt=\"Logo\" height=\"100px\" />\r\n            <h1>Arabic Reshaper</h1>\r\n            <Alert severity=\"info\" dir=\"rtl\">\r\n                {arabicIntro}\r\n            </Alert>\r\n            <Alert severity=\"info\">\r\n                {englishIntro}\r\n            </Alert>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport reshaper from 'arabic-persian-reshaper'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(1),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n}));\r\n\r\n\r\nexport default function ArabicForm() {\r\n    const classes = useStyles()\r\n\r\n    const [originalText, setOriginalText] = useState('')\r\n    const [reshapedText, setReshapedText] = useState('')\r\n\r\n    const handleValueChange = () => {\r\n        const transformedText = reshaper.ArabicShaper.convertArabic(originalText)\r\n        // for some reason, transformedText doesn't show up properly on Davinci Resolve 17\r\n        // so I neede to reverse the string\r\n        setReshapedText([...transformedText].reverse().join(''))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // useEffect is needed sice setState is asynchronous: https://stackoverflow.com/a/65807556/4488332\r\n        handleValueChange()\r\n    }, [originalText])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <div dir=\"rtl\" className={classes.paper}>\r\n                {/* <h2>النص الأصلي</h2> */}\r\n                <TextField\r\n                    id=\"outlined-multiline-static-original\"\r\n                    name=\"originalText\"\r\n                    margin=\"normal\"\r\n                    label=\"النص الأصلي\"\r\n                    placeholder=\"أدخل النص هنا\"\r\n                    multiline\r\n                    rows={5}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    onChange={e => setOriginalText(e.target.value)}\r\n                    value={originalText}\r\n                    required\r\n                    autoFocus\r\n                />\r\n                <h2>\r\n                    { reshapedText && <span>قم بنسخ النص أسفله</span>}\r\n                </h2>\r\n                <TextField\r\n                    id=\"outlined-multiline-static-reshaped\"\r\n                    name=\"reshapedText\"\r\n                    margin=\"normal\"\r\n                    label=\"النص المعدل\"\r\n                    dir=\"rtl\"\r\n                    multiline\r\n                    rows={5}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    value={reshapedText}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Link } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    marginLeft: \"20px\",\r\n    textDecoration: \"none\",\r\n  },\r\n}));\r\n\r\nexport default function AraAppBar(props) {\r\n  const classes = useStyles();\r\n  const { bgTheme, setBgTheme, icon } = props\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" dir=\"rtl\" style={{ background: \"#2E3B55\" }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            <Link href='/help' color=\"inherit\" style={{ textDecoration: \"none\" }}>مساعدة</Link>\r\n          </Typography>\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n            aria-label=\"mode\"\r\n            dir=\"rtl\"\r\n            onClick={() => setBgTheme(!bgTheme)}\r\n          >\r\n            {icon}\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { createTheme } from \"@material-ui/core/styles\";\r\nimport Brightness3Icon from \"@material-ui/icons/Brightness3\";\r\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\";\r\n\r\nimport Header from './Header';\r\nimport ArabicForm from './ArabicForm';\r\n\r\n// Configure JSS for RTL\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\r\nimport AraAppBar from \"./AraAppBar\";\r\n\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\n\r\nfunction App() {\r\n  const [bgTheme, setBgTheme] = useState(true);\r\n  const icon = !bgTheme ? <Brightness7Icon /> : <Brightness3Icon />;\r\n\r\n  const appTheme = createTheme(\r\n    // toggle between light and dark theme\r\n    bgTheme ? light : dark,\r\n    // RTL support, font and TextArea config \r\n    {\r\n      // Get a beautiful TextArea in Material UI: https://stackoverflow.com/a/64051350/4488332\r\n      overrides: {\r\n        MuiOutlinedInput: {\r\n          multiline: {\r\n            fontWeight: 'bold',\r\n            fontSize: '20px'\r\n          }\r\n        }\r\n      },\r\n      // Right to left: https://v3.material-ui.com/guides/right-to-left/\r\n      direction: 'rtl', // Both here and <body dir=\"rtl\">\r\n      typography: {\r\n        fontFamily: [\r\n          'Tajawal',\r\n          'sans-serif',\r\n        ].join(','),\r\n      },\r\n    });\r\n\r\n  return (\r\n      <ThemeProvider theme={appTheme}>\r\n        <StylesProvider jss={jss}>\r\n          <Container component=\"main\" maxWidth=\"lg\">\r\n            <AraAppBar bgTheme={bgTheme} setBgTheme={setBgTheme} icon={icon} />\r\n            <Header />\r\n            <ArabicForm />\r\n          </Container>\r\n        </StylesProvider>\r\n      </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport const light = {\r\n  palette: {\r\n    type: \"light\"\r\n  }\r\n};\r\nexport const dark = {\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}